/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ComplexTokenInterface extends utils.Interface {
  contractName: "ComplexToken";
  functions: {
    "addBots(address[])": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "automatedMarketMakerPairs(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "bots(address)": FunctionFragment;
    "buyLiquidityFee()": FunctionFragment;
    "buyMarketingFee()": FunctionFragment;
    "buyRewardFee()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "enableTrading()": FunctionFragment;
    "excludeFromFee(address,bool)": FunctionFragment;
    "excludeFromMaxTransaction(address,bool)": FunctionFragment;
    "excludeFromReward(address)": FunctionFragment;
    "gasPriceLimitActivated()": FunctionFragment;
    "includeInReward(address)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "isExcludedFromFee(address)": FunctionFragment;
    "isExcludedFromReward(address)": FunctionFragment;
    "isExcludedMaxTransactionAmount(address)": FunctionFragment;
    "isMarketingFeeNativeToken()": FunctionFragment;
    "limitsInTrade()": FunctionFragment;
    "lpWallet()": FunctionFragment;
    "mainPair()": FunctionFragment;
    "mainRouter()": FunctionFragment;
    "marketingWallet()": FunctionFragment;
    "maxTransactionAmount()": FunctionFragment;
    "maxWalletAmount()": FunctionFragment;
    "minAmountToTakeFee()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "removeBots(address[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sellLiquidityFee()": FunctionFragment;
    "sellMarketingFee()": FunctionFragment;
    "sellRewardFee()": FunctionFragment;
    "setAutomatedMarketMakerPair(address,bool)": FunctionFragment;
    "setGasPriceLimitActivated(bool)": FunctionFragment;
    "setLimitsInTrade(bool)": FunctionFragment;
    "setSwapAndLiquifyEnabled(bool)": FunctionFragment;
    "setTransferDelayEnabled(bool)": FunctionFragment;
    "swapAndLiquifyEnabled()": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenFromReflection(uint256)": FunctionFragment;
    "totalFees()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "tradingActive()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferDelayEnabled()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferLiquidityFee()": FunctionFragment;
    "transferMarketingFee()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferRewardFee()": FunctionFragment;
    "updateGasPriceLimit(uint256)": FunctionFragment;
    "updateLPWallet(address)": FunctionFragment;
    "updateLiquidityFee(uint16,uint16,uint16)": FunctionFragment;
    "updateMarketingFee(uint16,uint16,uint16)": FunctionFragment;
    "updateMarketingWallet(address,bool)": FunctionFragment;
    "updateMaxTransactionAmount(uint256)": FunctionFragment;
    "updateMaxWalletAmount(uint256)": FunctionFragment;
    "updateMinAmountToTakeFee(uint256)": FunctionFragment;
    "updateRewardFee(uint16,uint16,uint16)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addBots", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "automatedMarketMakerPairs",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "bots", values: [string]): string;
  encodeFunctionData(
    functionFragment: "buyLiquidityFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyMarketingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyRewardFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enableTrading",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromFee",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromMaxTransaction",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "gasPriceLimitActivated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "includeInReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedMaxTransactionAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isMarketingFeeNativeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "limitsInTrade",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lpWallet", values?: undefined): string;
  encodeFunctionData(functionFragment: "mainPair", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mainRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketingWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTransactionAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxWalletAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minAmountToTakeFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeBots",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellLiquidityFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellMarketingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellRewardFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAutomatedMarketMakerPair",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setGasPriceLimitActivated",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLimitsInTrade",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapAndLiquifyEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransferDelayEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAndLiquifyEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenFromReflection",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "totalFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradingActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferDelayEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferLiquidityFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferMarketingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferRewardFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateGasPriceLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLPWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLiquidityFee",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMarketingFee",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMarketingWallet",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxTransactionAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxWalletAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinAmountToTakeFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewardFee",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addBots", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "automatedMarketMakerPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bots", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyLiquidityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyMarketingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyRewardFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromMaxTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gasPriceLimitActivated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "includeInReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedMaxTransactionAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMarketingFeeNativeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "limitsInTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lpWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mainPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mainRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketingWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTransactionAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxWalletAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minAmountToTakeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeBots", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellLiquidityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellMarketingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellRewardFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAutomatedMarketMakerPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGasPriceLimitActivated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLimitsInTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapAndLiquifyEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransferDelayEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAndLiquifyEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenFromReflection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferDelayEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferLiquidityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferMarketingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferRewardFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGasPriceLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLPWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLiquidityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMarketingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMarketingWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxTransactionAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxWalletAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinAmountToTakeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRewardFee",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ExcludedFromFee(address,bool)": EventFragment;
    "ExcludedMaxTransactionAmount(address,bool)": EventFragment;
    "LogAddBots(address[])": EventFragment;
    "LogRemoveBots(address[])": EventFragment;
    "MarketingFeeTaken(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Reflect(uint256)": EventFragment;
    "SetAutomatedMarketMakerPair(address,bool)": EventFragment;
    "SwapAndLiquify(uint256,uint256)": EventFragment;
    "TradingActivated()": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UpdateLPWallet(address)": EventFragment;
    "UpdateLiquidityFee(uint16,uint16,uint16)": EventFragment;
    "UpdateMarketingFee(uint16,uint16,uint16)": EventFragment;
    "UpdateMarketingWallet(address,bool)": EventFragment;
    "UpdateMaxTransactionAmount(uint256)": EventFragment;
    "UpdateMaxWalletAmount(uint256)": EventFragment;
    "UpdateMinAmountToTakeFee(uint256)": EventFragment;
    "UpdateRewardFee(uint16,uint16,uint16)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExcludedFromFee"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ExcludedMaxTransactionAmount"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogAddBots"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRemoveBots"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketingFeeTaken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reflect"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetAutomatedMarketMakerPair"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapAndLiquify"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradingActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateLPWallet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateLiquidityFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMarketingFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMarketingWallet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMaxTransactionAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMaxWalletAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMinAmountToTakeFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateRewardFee"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ExcludedFromFeeEvent = TypedEvent<
  [string, boolean],
  { account: string; isEx: boolean }
>;

export type ExcludedFromFeeEventFilter = TypedEventFilter<ExcludedFromFeeEvent>;

export type ExcludedMaxTransactionAmountEvent = TypedEvent<
  [string, boolean],
  { updAds: string; isEx: boolean }
>;

export type ExcludedMaxTransactionAmountEventFilter =
  TypedEventFilter<ExcludedMaxTransactionAmountEvent>;

export type LogAddBotsEvent = TypedEvent<[string[]], { bots: string[] }>;

export type LogAddBotsEventFilter = TypedEventFilter<LogAddBotsEvent>;

export type LogRemoveBotsEvent = TypedEvent<[string[]], { notbots: string[] }>;

export type LogRemoveBotsEventFilter = TypedEventFilter<LogRemoveBotsEvent>;

export type MarketingFeeTakenEvent = TypedEvent<
  [BigNumber, BigNumber],
  { marketingFeeTokens: BigNumber; marketingFeeBNBSwapped: BigNumber }
>;

export type MarketingFeeTakenEventFilter =
  TypedEventFilter<MarketingFeeTakenEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type ReflectEvent = TypedEvent<[BigNumber], { amount: BigNumber }>;

export type ReflectEventFilter = TypedEventFilter<ReflectEvent>;

export type SetAutomatedMarketMakerPairEvent = TypedEvent<
  [string, boolean],
  { pair: string; value: boolean }
>;

export type SetAutomatedMarketMakerPairEventFilter =
  TypedEventFilter<SetAutomatedMarketMakerPairEvent>;

export type SwapAndLiquifyEvent = TypedEvent<
  [BigNumber, BigNumber],
  { tokensForLiquidity: BigNumber; bnbForLiquidity: BigNumber }
>;

export type SwapAndLiquifyEventFilter = TypedEventFilter<SwapAndLiquifyEvent>;

export type TradingActivatedEvent = TypedEvent<[], {}>;

export type TradingActivatedEventFilter =
  TypedEventFilter<TradingActivatedEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type UpdateLPWalletEvent = TypedEvent<[string], { lpWallet: string }>;

export type UpdateLPWalletEventFilter = TypedEventFilter<UpdateLPWalletEvent>;

export type UpdateLiquidityFeeEvent = TypedEvent<
  [number, number, number],
  {
    sellLiquidityFee: number;
    buyLiquidityFee: number;
    transferLiquidityFee: number;
  }
>;

export type UpdateLiquidityFeeEventFilter =
  TypedEventFilter<UpdateLiquidityFeeEvent>;

export type UpdateMarketingFeeEvent = TypedEvent<
  [number, number, number],
  {
    sellMarketingFee: number;
    buyMarketingFee: number;
    transferMarketingFee: number;
  }
>;

export type UpdateMarketingFeeEventFilter =
  TypedEventFilter<UpdateMarketingFeeEvent>;

export type UpdateMarketingWalletEvent = TypedEvent<
  [string, boolean],
  { marketingWallet: string; isMarketingFeeNativeToken: boolean }
>;

export type UpdateMarketingWalletEventFilter =
  TypedEventFilter<UpdateMarketingWalletEvent>;

export type UpdateMaxTransactionAmountEvent = TypedEvent<
  [BigNumber],
  { maxTransactionAmount: BigNumber }
>;

export type UpdateMaxTransactionAmountEventFilter =
  TypedEventFilter<UpdateMaxTransactionAmountEvent>;

export type UpdateMaxWalletAmountEvent = TypedEvent<
  [BigNumber],
  { maxWalletAmount: BigNumber }
>;

export type UpdateMaxWalletAmountEventFilter =
  TypedEventFilter<UpdateMaxWalletAmountEvent>;

export type UpdateMinAmountToTakeFeeEvent = TypedEvent<
  [BigNumber],
  { minAmountToTakeFee: BigNumber }
>;

export type UpdateMinAmountToTakeFeeEventFilter =
  TypedEventFilter<UpdateMinAmountToTakeFeeEvent>;

export type UpdateRewardFeeEvent = TypedEvent<
  [number, number, number],
  { sellRewardFee: number; buyRewardFee: number; transferRewardFee: number }
>;

export type UpdateRewardFeeEventFilter = TypedEventFilter<UpdateRewardFeeEvent>;

export interface ComplexToken extends BaseContract {
  contractName: "ComplexToken";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ComplexTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addBots(
      _bots: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    automatedMarketMakerPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    bots(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    buyLiquidityFee(overrides?: CallOverrides): Promise<[number]>;

    buyMarketingFee(overrides?: CallOverrides): Promise<[number]>;

    buyRewardFee(overrides?: CallOverrides): Promise<[number]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enableTrading(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    excludeFromFee(
      account: string,
      isEx: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    excludeFromMaxTransaction(
      updAds: string,
      isEx: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    excludeFromReward(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gasPriceLimitActivated(overrides?: CallOverrides): Promise<[boolean]>;

    includeInReward(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isExcludedFromFee(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isExcludedFromReward(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isExcludedMaxTransactionAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMarketingFeeNativeToken(overrides?: CallOverrides): Promise<[boolean]>;

    limitsInTrade(overrides?: CallOverrides): Promise<[boolean]>;

    lpWallet(overrides?: CallOverrides): Promise<[string]>;

    mainPair(overrides?: CallOverrides): Promise<[string]>;

    mainRouter(overrides?: CallOverrides): Promise<[string]>;

    marketingWallet(overrides?: CallOverrides): Promise<[string]>;

    maxTransactionAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxWalletAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    minAmountToTakeFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeBots(
      _notbots: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellLiquidityFee(overrides?: CallOverrides): Promise<[number]>;

    sellMarketingFee(overrides?: CallOverrides): Promise<[number]>;

    sellRewardFee(overrides?: CallOverrides): Promise<[number]>;

    setAutomatedMarketMakerPair(
      pair: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGasPriceLimitActivated(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLimitsInTrade(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSwapAndLiquifyEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTransferDelayEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapAndLiquifyEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenFromReflection(
      rAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    tradingActive(overrides?: CallOverrides): Promise<[boolean]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferDelayEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferLiquidityFee(overrides?: CallOverrides): Promise<[number]>;

    transferMarketingFee(overrides?: CallOverrides): Promise<[number]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferRewardFee(overrides?: CallOverrides): Promise<[number]>;

    updateGasPriceLimit(
      gas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateLPWallet(
      _lpWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateLiquidityFee(
      _sellLiquidityFee: BigNumberish,
      _buyLiquidityFee: BigNumberish,
      _transferLiquidityFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMarketingFee(
      _sellMarketingFee: BigNumberish,
      _buyMarketingFee: BigNumberish,
      _transferMarketingFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMarketingWallet(
      _marketingWallet: string,
      _isMarketingFeeNativeToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMaxTransactionAmount(
      _maxTransactionAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMaxWalletAmount(
      _maxWalletAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMinAmountToTakeFee(
      _minAmountToTakeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRewardFee(
      _sellRewardFee: BigNumberish,
      _buyRewardFee: BigNumberish,
      _transferRewardFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addBots(
    _bots: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  automatedMarketMakerPairs(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  bots(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  buyLiquidityFee(overrides?: CallOverrides): Promise<number>;

  buyMarketingFee(overrides?: CallOverrides): Promise<number>;

  buyRewardFee(overrides?: CallOverrides): Promise<number>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enableTrading(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  excludeFromFee(
    account: string,
    isEx: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  excludeFromMaxTransaction(
    updAds: string,
    isEx: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  excludeFromReward(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gasPriceLimitActivated(overrides?: CallOverrides): Promise<boolean>;

  includeInReward(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isExcludedFromFee(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isExcludedFromReward(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isExcludedMaxTransactionAmount(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMarketingFeeNativeToken(overrides?: CallOverrides): Promise<boolean>;

  limitsInTrade(overrides?: CallOverrides): Promise<boolean>;

  lpWallet(overrides?: CallOverrides): Promise<string>;

  mainPair(overrides?: CallOverrides): Promise<string>;

  mainRouter(overrides?: CallOverrides): Promise<string>;

  marketingWallet(overrides?: CallOverrides): Promise<string>;

  maxTransactionAmount(overrides?: CallOverrides): Promise<BigNumber>;

  maxWalletAmount(overrides?: CallOverrides): Promise<BigNumber>;

  minAmountToTakeFee(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeBots(
    _notbots: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellLiquidityFee(overrides?: CallOverrides): Promise<number>;

  sellMarketingFee(overrides?: CallOverrides): Promise<number>;

  sellRewardFee(overrides?: CallOverrides): Promise<number>;

  setAutomatedMarketMakerPair(
    pair: string,
    value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGasPriceLimitActivated(
    _enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLimitsInTrade(
    _enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSwapAndLiquifyEnabled(
    _enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTransferDelayEnabled(
    _enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapAndLiquifyEnabled(overrides?: CallOverrides): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenFromReflection(
    rAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalFees(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  tradingActive(overrides?: CallOverrides): Promise<boolean>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferDelayEnabled(overrides?: CallOverrides): Promise<boolean>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferLiquidityFee(overrides?: CallOverrides): Promise<number>;

  transferMarketingFee(overrides?: CallOverrides): Promise<number>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferRewardFee(overrides?: CallOverrides): Promise<number>;

  updateGasPriceLimit(
    gas: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateLPWallet(
    _lpWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateLiquidityFee(
    _sellLiquidityFee: BigNumberish,
    _buyLiquidityFee: BigNumberish,
    _transferLiquidityFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMarketingFee(
    _sellMarketingFee: BigNumberish,
    _buyMarketingFee: BigNumberish,
    _transferMarketingFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMarketingWallet(
    _marketingWallet: string,
    _isMarketingFeeNativeToken: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMaxTransactionAmount(
    _maxTransactionAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMaxWalletAmount(
    _maxWalletAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMinAmountToTakeFee(
    _minAmountToTakeFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRewardFee(
    _sellRewardFee: BigNumberish,
    _buyRewardFee: BigNumberish,
    _transferRewardFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addBots(_bots: string[], overrides?: CallOverrides): Promise<void>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    automatedMarketMakerPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    bots(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    buyLiquidityFee(overrides?: CallOverrides): Promise<number>;

    buyMarketingFee(overrides?: CallOverrides): Promise<number>;

    buyRewardFee(overrides?: CallOverrides): Promise<number>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    enableTrading(overrides?: CallOverrides): Promise<void>;

    excludeFromFee(
      account: string,
      isEx: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    excludeFromMaxTransaction(
      updAds: string,
      isEx: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    excludeFromReward(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    gasPriceLimitActivated(overrides?: CallOverrides): Promise<boolean>;

    includeInReward(account: string, overrides?: CallOverrides): Promise<void>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isExcludedFromFee(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isExcludedFromReward(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isExcludedMaxTransactionAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMarketingFeeNativeToken(overrides?: CallOverrides): Promise<boolean>;

    limitsInTrade(overrides?: CallOverrides): Promise<boolean>;

    lpWallet(overrides?: CallOverrides): Promise<string>;

    mainPair(overrides?: CallOverrides): Promise<string>;

    mainRouter(overrides?: CallOverrides): Promise<string>;

    marketingWallet(overrides?: CallOverrides): Promise<string>;

    maxTransactionAmount(overrides?: CallOverrides): Promise<BigNumber>;

    maxWalletAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minAmountToTakeFee(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeBots(_notbots: string[], overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sellLiquidityFee(overrides?: CallOverrides): Promise<number>;

    sellMarketingFee(overrides?: CallOverrides): Promise<number>;

    sellRewardFee(overrides?: CallOverrides): Promise<number>;

    setAutomatedMarketMakerPair(
      pair: string,
      value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setGasPriceLimitActivated(
      _enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setLimitsInTrade(
      _enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapAndLiquifyEnabled(
      _enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setTransferDelayEnabled(
      _enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    swapAndLiquifyEnabled(overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenFromReflection(
      rAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalFees(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    tradingActive(overrides?: CallOverrides): Promise<boolean>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferDelayEnabled(overrides?: CallOverrides): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferLiquidityFee(overrides?: CallOverrides): Promise<number>;

    transferMarketingFee(overrides?: CallOverrides): Promise<number>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferRewardFee(overrides?: CallOverrides): Promise<number>;

    updateGasPriceLimit(
      gas: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateLPWallet(_lpWallet: string, overrides?: CallOverrides): Promise<void>;

    updateLiquidityFee(
      _sellLiquidityFee: BigNumberish,
      _buyLiquidityFee: BigNumberish,
      _transferLiquidityFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMarketingFee(
      _sellMarketingFee: BigNumberish,
      _buyMarketingFee: BigNumberish,
      _transferMarketingFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMarketingWallet(
      _marketingWallet: string,
      _isMarketingFeeNativeToken: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMaxTransactionAmount(
      _maxTransactionAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMaxWalletAmount(
      _maxWalletAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMinAmountToTakeFee(
      _minAmountToTakeFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRewardFee(
      _sellRewardFee: BigNumberish,
      _buyRewardFee: BigNumberish,
      _transferRewardFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "ExcludedFromFee(address,bool)"(
      account?: null,
      isEx?: null
    ): ExcludedFromFeeEventFilter;
    ExcludedFromFee(account?: null, isEx?: null): ExcludedFromFeeEventFilter;

    "ExcludedMaxTransactionAmount(address,bool)"(
      updAds?: null,
      isEx?: null
    ): ExcludedMaxTransactionAmountEventFilter;
    ExcludedMaxTransactionAmount(
      updAds?: null,
      isEx?: null
    ): ExcludedMaxTransactionAmountEventFilter;

    "LogAddBots(address[])"(bots?: string[] | null): LogAddBotsEventFilter;
    LogAddBots(bots?: string[] | null): LogAddBotsEventFilter;

    "LogRemoveBots(address[])"(
      notbots?: string[] | null
    ): LogRemoveBotsEventFilter;
    LogRemoveBots(notbots?: string[] | null): LogRemoveBotsEventFilter;

    "MarketingFeeTaken(uint256,uint256)"(
      marketingFeeTokens?: null,
      marketingFeeBNBSwapped?: null
    ): MarketingFeeTakenEventFilter;
    MarketingFeeTaken(
      marketingFeeTokens?: null,
      marketingFeeBNBSwapped?: null
    ): MarketingFeeTakenEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Reflect(uint256)"(amount?: null): ReflectEventFilter;
    Reflect(amount?: null): ReflectEventFilter;

    "SetAutomatedMarketMakerPair(address,bool)"(
      pair?: null,
      value?: null
    ): SetAutomatedMarketMakerPairEventFilter;
    SetAutomatedMarketMakerPair(
      pair?: null,
      value?: null
    ): SetAutomatedMarketMakerPairEventFilter;

    "SwapAndLiquify(uint256,uint256)"(
      tokensForLiquidity?: null,
      bnbForLiquidity?: null
    ): SwapAndLiquifyEventFilter;
    SwapAndLiquify(
      tokensForLiquidity?: null,
      bnbForLiquidity?: null
    ): SwapAndLiquifyEventFilter;

    "TradingActivated()"(): TradingActivatedEventFilter;
    TradingActivated(): TradingActivatedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "UpdateLPWallet(address)"(lpWallet?: null): UpdateLPWalletEventFilter;
    UpdateLPWallet(lpWallet?: null): UpdateLPWalletEventFilter;

    "UpdateLiquidityFee(uint16,uint16,uint16)"(
      sellLiquidityFee?: null,
      buyLiquidityFee?: null,
      transferLiquidityFee?: null
    ): UpdateLiquidityFeeEventFilter;
    UpdateLiquidityFee(
      sellLiquidityFee?: null,
      buyLiquidityFee?: null,
      transferLiquidityFee?: null
    ): UpdateLiquidityFeeEventFilter;

    "UpdateMarketingFee(uint16,uint16,uint16)"(
      sellMarketingFee?: null,
      buyMarketingFee?: null,
      transferMarketingFee?: null
    ): UpdateMarketingFeeEventFilter;
    UpdateMarketingFee(
      sellMarketingFee?: null,
      buyMarketingFee?: null,
      transferMarketingFee?: null
    ): UpdateMarketingFeeEventFilter;

    "UpdateMarketingWallet(address,bool)"(
      marketingWallet?: null,
      isMarketingFeeNativeToken?: null
    ): UpdateMarketingWalletEventFilter;
    UpdateMarketingWallet(
      marketingWallet?: null,
      isMarketingFeeNativeToken?: null
    ): UpdateMarketingWalletEventFilter;

    "UpdateMaxTransactionAmount(uint256)"(
      maxTransactionAmount?: null
    ): UpdateMaxTransactionAmountEventFilter;
    UpdateMaxTransactionAmount(
      maxTransactionAmount?: null
    ): UpdateMaxTransactionAmountEventFilter;

    "UpdateMaxWalletAmount(uint256)"(
      maxWalletAmount?: null
    ): UpdateMaxWalletAmountEventFilter;
    UpdateMaxWalletAmount(
      maxWalletAmount?: null
    ): UpdateMaxWalletAmountEventFilter;

    "UpdateMinAmountToTakeFee(uint256)"(
      minAmountToTakeFee?: null
    ): UpdateMinAmountToTakeFeeEventFilter;
    UpdateMinAmountToTakeFee(
      minAmountToTakeFee?: null
    ): UpdateMinAmountToTakeFeeEventFilter;

    "UpdateRewardFee(uint16,uint16,uint16)"(
      sellRewardFee?: null,
      buyRewardFee?: null,
      transferRewardFee?: null
    ): UpdateRewardFeeEventFilter;
    UpdateRewardFee(
      sellRewardFee?: null,
      buyRewardFee?: null,
      transferRewardFee?: null
    ): UpdateRewardFeeEventFilter;
  };

  estimateGas: {
    addBots(
      _bots: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    automatedMarketMakerPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    bots(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    buyMarketingFee(overrides?: CallOverrides): Promise<BigNumber>;

    buyRewardFee(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enableTrading(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    excludeFromFee(
      account: string,
      isEx: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    excludeFromMaxTransaction(
      updAds: string,
      isEx: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    excludeFromReward(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gasPriceLimitActivated(overrides?: CallOverrides): Promise<BigNumber>;

    includeInReward(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isExcludedFromFee(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isExcludedFromReward(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isExcludedMaxTransactionAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMarketingFeeNativeToken(overrides?: CallOverrides): Promise<BigNumber>;

    limitsInTrade(overrides?: CallOverrides): Promise<BigNumber>;

    lpWallet(overrides?: CallOverrides): Promise<BigNumber>;

    mainPair(overrides?: CallOverrides): Promise<BigNumber>;

    mainRouter(overrides?: CallOverrides): Promise<BigNumber>;

    marketingWallet(overrides?: CallOverrides): Promise<BigNumber>;

    maxTransactionAmount(overrides?: CallOverrides): Promise<BigNumber>;

    maxWalletAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minAmountToTakeFee(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeBots(
      _notbots: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    sellMarketingFee(overrides?: CallOverrides): Promise<BigNumber>;

    sellRewardFee(overrides?: CallOverrides): Promise<BigNumber>;

    setAutomatedMarketMakerPair(
      pair: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGasPriceLimitActivated(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLimitsInTrade(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSwapAndLiquifyEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTransferDelayEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapAndLiquifyEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenFromReflection(
      rAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalFees(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    tradingActive(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferDelayEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    transferMarketingFee(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferRewardFee(overrides?: CallOverrides): Promise<BigNumber>;

    updateGasPriceLimit(
      gas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateLPWallet(
      _lpWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateLiquidityFee(
      _sellLiquidityFee: BigNumberish,
      _buyLiquidityFee: BigNumberish,
      _transferLiquidityFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMarketingFee(
      _sellMarketingFee: BigNumberish,
      _buyMarketingFee: BigNumberish,
      _transferMarketingFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMarketingWallet(
      _marketingWallet: string,
      _isMarketingFeeNativeToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMaxTransactionAmount(
      _maxTransactionAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMaxWalletAmount(
      _maxWalletAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMinAmountToTakeFee(
      _minAmountToTakeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRewardFee(
      _sellRewardFee: BigNumberish,
      _buyRewardFee: BigNumberish,
      _transferRewardFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addBots(
      _bots: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    automatedMarketMakerPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bots(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyLiquidityFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyMarketingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyRewardFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enableTrading(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    excludeFromFee(
      account: string,
      isEx: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    excludeFromMaxTransaction(
      updAds: string,
      isEx: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    excludeFromReward(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gasPriceLimitActivated(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    includeInReward(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isExcludedFromFee(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isExcludedFromReward(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isExcludedMaxTransactionAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMarketingFeeNativeToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    limitsInTrade(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mainPair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mainRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketingWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxTransactionAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxWalletAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minAmountToTakeFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeBots(
      _notbots: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellLiquidityFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellMarketingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellRewardFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAutomatedMarketMakerPair(
      pair: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGasPriceLimitActivated(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLimitsInTrade(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSwapAndLiquifyEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTransferDelayEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapAndLiquifyEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenFromReflection(
      rAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tradingActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferDelayEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferLiquidityFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferMarketingFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferRewardFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateGasPriceLimit(
      gas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateLPWallet(
      _lpWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateLiquidityFee(
      _sellLiquidityFee: BigNumberish,
      _buyLiquidityFee: BigNumberish,
      _transferLiquidityFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMarketingFee(
      _sellMarketingFee: BigNumberish,
      _buyMarketingFee: BigNumberish,
      _transferMarketingFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMarketingWallet(
      _marketingWallet: string,
      _isMarketingFeeNativeToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMaxTransactionAmount(
      _maxTransactionAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMaxWalletAmount(
      _maxWalletAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMinAmountToTakeFee(
      _minAmountToTakeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRewardFee(
      _sellRewardFee: BigNumberish,
      _buyRewardFee: BigNumberish,
      _transferRewardFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
